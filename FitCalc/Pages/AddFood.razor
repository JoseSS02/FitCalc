@page "/add-food"
@page "/add-food/{usuario}"

@using FitCalc.Services;
@inject NavigationManager Navigation
@inject DatabaseService DbService
@using FitCalc.Models

<style>
    .container {
        display: flex;
        height: 100vh;
        font-family: 'Segoe UI', sans-serif;
    }

    .sidebar {
        width: 300px;
        background-color: #f9fafb;
        padding: 20px;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        position: relative;
    }

    .user-name {
        position: absolute;
        top: 10px;
        left: 20px;
        font-weight: 600;
        font-size: 1rem;
        color: #1e3a8a;
    }

    .search-box input {
        width: 100%;
        padding: 8px;
        border-radius: 6px;
        border: 1px solid #ccc;
        margin-bottom: 15px;
        margin-top: 40px; /* para dejar espacio al nombre */
    }

    .alimentos-scroll {
        overflow-y: auto;
        flex-grow: 1;
    }

    .alimento-item {
        padding: 10px;
        margin-bottom: 8px;
        background-color: #f3f4f6;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .alimento-item:hover {
            background-color: #e0e7ff;
        }

    .add-button {
        margin-top: 10px;
        padding: 10px;
        background-color: #4f46e5;
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        font-size: 24px;
        text-align: center;
        cursor: pointer;
        align-self: center;
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
    }

        .add-button:hover {
            background-color: #4338ca;
        }

    .main-content {
        flex-grow: 1;
        padding: 30px;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        width: 300px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

        .modal input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 6px;
        }

        .modal button {
            padding: 8px 12px;
            background-color: #10b981;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
        }

            .modal button:hover {
                background-color: #059669;
            }
</style>

<div class="container">
    <div class="sidebar">
        <div class="user-name">@usuario</div>

        <div class="search-box">
            <input type="text" placeholder="Buscar alimento..." @bind="filtroBusqueda" />
        </div>

        <div class="alimentos-scroll">
            @if (AlimentosFiltrados.Any())
            {
                @foreach (var alimento in AlimentosFiltrados)
                {
                    <div class="alimento-item">
                        <b>@alimento.Nombre</b><br />
                        Calorías: @alimento.Kcal kcal<br />
                        Proteínas: @alimento.Proteinas g<br />
                        Grasas: @alimento.Grasas g<br />
                        Hidratos: @alimento.Hidratos g
                    </div>
                }
            }
            else
            {
                <div>No se encontraron alimentos.</div>
            }
        </div>

        <button class="add-button" @onclick="() => mostrarModal = true">+</button>
    </div>

    <div class="main-content">
        <h2>Selecciona un alimento desde la izquierda</h2>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal-overlay" @onclick="CerrarModal">
        <div class="modal" @onclick:stopPropagation>
            <h3>Añadir Alimento</h3>
            <input placeholder="Nombre" @bind="nuevoAlimento.Nombre" />
            <input placeholder="Kcal" type="number" @bind="nuevoAlimento.Kcal" />
            <input placeholder="Proteínas (g)" type="number" step="0.01" @bind="nuevoAlimento.Proteinas" />
            <input placeholder="Grasas (g)" type="number" step="0.01" @bind="nuevoAlimento.Grasas" />
            <input placeholder="Hidratos (g)" type="number" step="0.01" @bind="nuevoAlimento.Hidratos" />
            <button @onclick="GuardarAlimentoAsync">Guardar</button>
        </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? usuario { get; set; }

    private List<Alimento> alimentos = new();
    private string filtroBusqueda = "";
    private bool mostrarModal = false;

    private Alimento nuevoAlimento = new();

    protected override async Task OnInitializedAsync()
    {
        alimentos = await DbService.ObtenerAlimentosAsync();
    }

    private IEnumerable<Alimento> AlimentosFiltrados =>
        string.IsNullOrWhiteSpace(filtroBusqueda)
            ? alimentos
            : alimentos.Where(a => a.Nombre.Contains(filtroBusqueda, StringComparison.OrdinalIgnoreCase));

    private void CerrarModal()
    {
        mostrarModal = false;
        nuevoAlimento = new(); // limpiar campos
    }

    private async Task GuardarAlimentoAsync()
    {
        if (!string.IsNullOrWhiteSpace(nuevoAlimento.Nombre))
        {
            await DbService.InsertarAlimentoAsync(nuevoAlimento);
            alimentos = await DbService.ObtenerAlimentosAsync();
            filtroBusqueda = ""; // resetear filtro si quieres
            CerrarModal();
        }
    }
}
