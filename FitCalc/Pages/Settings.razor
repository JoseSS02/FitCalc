@page "/settings"
@inject NavigationManager Navigation
@inject DatabaseService DbService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using FitCalc.Models
@using FitCalc.Services
@using System.Web

<style>
    .settings-container {
        max-width: 400px;
        margin: 80px auto 20px;
        padding: 20px;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        position: relative;
    }

    .back-button {
        position: fixed;
        top: 16px;
        left: 16px;
        background-color: transparent;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: #4f46e5;
        font-weight: 600;
    }

        .back-button:hover {
            color: #4338ca;
        }

    h2 {
        text-align: center;
        color: #1e3a8a;
        margin-bottom: 24px;
    }

    label {
        display: block;
        margin-top: 16px;
        margin-bottom: 6px;
        font-weight: 600;
        color: #374151;
    }

    select, input {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #cbd5e1;
        border-radius: 8px;
        box-sizing: border-box;
    }

    button.save-btn {
        margin-top: 24px;
        width: 100%;
        padding: 12px;
        background-color: #4f46e5;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
    }

        button.save-btn:hover {
            background-color: #4338ca;
        }
</style>

<button class="back-button" @onclick="VolverAHome" title="Volver">&larr; Atrás</button>

<div class="settings-container">
    <h2>Ajustes del Perfil</h2>

    <label>Peso (kg)</label>
    <input @bind="weight" type="number" min="30" max="250" disabled="@modoPersonalizado" />

    <label>Estatura (cm)</label>
    <input @bind="height" type="number" min="100" max="250" disabled="@modoPersonalizado" />

    <label>Edad</label>
    <input @bind="age" type="number" min="10" max="100" disabled="@modoPersonalizado" />

    <label>Ejercicio</label>
    <select @bind="activity" disabled="@modoPersonalizado">
        <option>Ninguno</option>
        <option>Moderado</option>
        <option>Activo</option>
    </select>

    <label>Objetivo</label>
    <select @bind="goal" disabled="@modoPersonalizado">
        <option>Ganancia muscular</option>
        <option>Mantenimiento</option>
        <option>Pérdida de peso</option>
    </select>

    <label style="display: flex; flex-direction: column; align-items: center; margin-top: 16px; cursor: pointer;">
        <input type="checkbox" @bind="modoPersonalizado" style="width: 24px; height: 24px;" />
        <span style="margin-top: 6px; font-weight: 600;">Personalizar</span>
    </label>



    @if (modoPersonalizado)
    {
        <label>Proteínas (g)</label>
        <input type="number" @bind="proteinasPersonalizadas" min="0" step="1" />

        <label>Grasas (g)</label>
        <input type="number" @bind="grasasPersonalizadas" min="0" step="1" />

        <label>Hidratos (g)</label>
        <input type="number" @bind="hidratosPersonalizados" min="0" step="1" />
    }

    <button class="save-btn" @onclick="SaveSettings">Guardar</button>
</div>

@code {
    private string NombreUsuario = string.Empty;

    private string goal = "Mantenimiento";
    private double weight = 70;
    private double height = 170;
    private int age = 30;
    private string activity = "Moderado";

    private bool modoPersonalizado = false;
    private float proteinasPersonalizadas;
    private float grasasPersonalizadas;
    private float hidratosPersonalizados;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);
        var usuario = queryParams.Get("usuario");

        if (string.IsNullOrEmpty(usuario))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        NombreUsuario = usuario;

        if (await localStorage.ContainKeyAsync("userSettings"))
        {
            var settings = await localStorage.GetItemAsync<UserSettings>("userSettings");
            if (settings != null)
            {
                weight = settings.Weight;
                height = settings.Height;
                age = settings.Age;
                activity = settings.Activity;
                goal = settings.Goal;
            }
        }
    }

    private async Task SaveSettings()
    {
        float proteinas;
        float grasas;
        float hidratos;
        int caloriasFinal;

        if (modoPersonalizado)
        {
            proteinas = proteinasPersonalizadas;
            grasas = grasasPersonalizadas;
            hidratos = hidratosPersonalizados;

            caloriasFinal = (int)Math.Round(proteinas * 4 + grasas * 9 + hidratos * 4);
        }
        else
        {
            double tmb = 10 * weight + 6.25 * height - 5 * age + 5;

            double factorActividad = activity switch
            {
                "Moderado" => 1.55,
                "Activo" => 1.9,
                _ => 1.2
            };

            double calorias = tmb * factorActividad;

            if (goal == "Pérdida de peso")
                calorias -= 500;
            else if (goal == "Ganancia muscular")
                calorias += 500;

            caloriasFinal = (int)Math.Round(calorias);
            proteinas = (float)(weight * 2);
            grasas = (float)(weight * 1);
            hidratos = (float)((calorias - (proteinas * 4 + grasas * 9)) / 4);
        }

        await DbService.ActualizarMacrosUsuarioAsync(NombreUsuario, caloriasFinal, proteinas, grasas, hidratos);

        var settings = new UserSettings
            {
                Weight = weight,
                Height = height,
                Age = age,
                Activity = activity,
                Goal = goal
            };

        await localStorage.SetItemAsync("userSettings", settings);
        Navigation.NavigateTo($"/home?usuario={NombreUsuario}");
    }

    private void VolverAHome()
    {
        Navigation.NavigateTo($"/home?usuario={NombreUsuario}");
    }

    public class UserSettings
    {
        public double Weight { get; set; }
        public double Height { get; set; }
        public int Age { get; set; }
        public string Activity { get; set; } = "Moderado";
        public string Goal { get; set; } = "Mantenimiento";
    }
}
